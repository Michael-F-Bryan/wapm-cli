name: core tests

env:
  RUST_BACKTRACE: 1

on:
  push:
    branches:
      - 'master'
      - 'staging'
      - 'trying'
    tags:
      # this is _not_ a regex, see: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - '[0-9]+.[0-9]+.[0-9]+*'
jobs:
  setup:
    name: Set up
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.setup.outputs.VERSION }}
      DOING_RELEASE: ${{ steps.setup.outputs.DOING_RELEASE }}
    steps:
      - name: Set up env vars
        id: setup
        shell: bash
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=VERSION::${VERSION}
          DOING_RELEASE=$(echo $VERSION | grep -c '[0-9]\+\.[0-9]\+\.[0-9]\+\(-.*\)\?' || true)
          echo ::set-output name=DOING_RELEASE::${DOING_RELEASE}
          echo $VERSION
          echo $DOING_RELEASE


          # TODO:
            # install cmake
  test:
    name: Test on ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable
    env:
      CARGO_SCCACHE_VERSION: 0.2.10
      SCCACHE_AZURE_BLOB_CONTAINER: ${{ secrets.SCCACHE_AZURE_BLOB_CONTAINER }}
      SCCACHE_AZURE_CONNECTION_STRING: ${{ secrets.SCCACHE_AZURE_CONNECTION_STRING }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Configure cargo data directory
        # After this point, all cargo registry and crate data is stored in
        # $GITHUB_WORKSPACE/.cargo_home. This allows us to cache only the files
        # that are needed during the build process. Additionally, this works
        # around a bug in the 'cache' action that causes directories outside of
        # the workspace dir to be saved/restored incorrectly.
        run: echo "::set-env name=CARGO_HOME::$(pwd)/.cargo_home"
       - name: Install sccache
         run: |
           echo "::add-path::${{ runner.tool_cache }}/cargo-sccache/bin"
           cargo install sccache --version ${{ env.CARGO_SCCACHE_VERSION }} --root ${{ runner.tool_cache }}/cargo-sccache
       - name: Start sccache
         run: |
           ${{ runner.tool_cache }}/cargo-sccache/bin/sccache --start-server
           ${{ runner.tool_cache }}/cargo-sccache/bin/sscache -s
           echo "::set-env name=RUSTC_WRAPPER::${{ runner.tool_cache }}/cargo-sccache/bin/sccache"
      - name: Install Cmake (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
      - name: Install cmake (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -ex
          curl -O https://cmake.org/files/v3.4/cmake-3.4.1-Darwin-x86_64.tar.gz
          tar xf cmake-3.4.1-Darwin-x86_64.tar.gz
          export CMAKE_BIN_PATH="`pwd`/cmake-3.4.1-Darwin-x86_64/CMake.app/Contents/bin"
          export PATH=$CMAKE_BIN_PATH:$PATH
      - name: Install cmake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -O https://cmake.org/files/v3.4/cmake-3.4.1-Linux-x86_64.tar.gz
          tar xf cmake-3.4.1-Linux-x86_64.tar.gz
          export CMAKE_BIN_PATH="`pwd`/cmake-3.4.1-Linux-x86_64/CMake.app/Contents/bin"
          export PATH=$CMAKE_BIN_PATH:$PATH
      - name: Tests
        run: |
          cargo test --verbose --features "update-notifications" -- --test-threads=1
      - name: Integration Tests
        run: |
          make integration-tests
      - name: Tests (Wasm Interface)
        run: |
          cargo test --manifest-path lib/wasm-interface/Cargo.toml
      - name: Check
        run: |
          cargo check --features "telemetry update-notifications"
      - name: Build binary
        run: |
          make build-wapm
      - name: Upload Artifacts (Unix)
        uses: actions/upload-artifact@v2
        if: matrix.os != 'windows-latest'
        with:
          name: wapm-${{ matrix.os }}
          path: target/release/wapm
      - name: Upload Artifacts (Windows)
        uses: actions/upload-artifact@v2
        if: matrix.os == 'windows-latest'
        with:
          name: wapm-${{ matrix.os }}
          path: target/release/wapm.exe
      - name: Cache
        uses: actions/cache@master
        with:
          # Note: crates from the git repo always get rebuilt
          # so we cache only those subdirectories of target/{debug|release} that
          # contain the build output for crates that come from the registry.
          path: |-
            .cargo_home
            target/*/.*
            target/*/build
            target/*/deps
          key: ${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('Cargo.lock') }}

  regression_tests:
    needs: [setup, test]
    runs-on: ubuntu-latest
    steps:
      - name: Install Wasmer
        run: |
          curl https://get.wasmer.io -sSfL | sh
      - name: Download the Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Set up for tests
        runs: |
          export PATH=`pwd`/artifacts:$PATH
      # TODO: move this logic into files
      - name: Regression test: direct execution works
        shell: bash
        run: |
          export PATH=$PATH:$HOME/.cargo/bin
          export PATH=$PATH:$HOME/.wasmer/bin
          export WAPM_DISABLE_COLOR=true
          rm $WASMER_DIR/.wax_index.toml
          # TODO force clear cache
          rm wapm.toml
          rm wapm.lock
          chmod +x end-to-end-tests/direct_execute.sh
          echo "RUNNING SCRIPT..."
          ./end-to-end-tests/direct_execute.sh &> /tmp/direct_execute.txt
          echo "GENERATED OUTPUT:"
          cat /tmp/direct_execute.txt
          echo "COMPARING..."
          diff -Bba end-to-end-tests/direct_execute.txt /tmp/direct_execute.txt
          export OUT=$?
          if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
          rm wapm.lock
          rm wapm.toml
          rm -rf wapm_packages
          rm /tmp/direct_execute.txt
          if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
          exit $OUT
      - name: Regression test: Install, Uninstall, Run, and List
        shell: bash
        run: |
          export PATH=$PATH:$HOME/.cargo/bin
          export PATH=$PATH:$HOME/.wasmer/bin
          export WAPM_DISABLE_COLOR=true
          rm $WASMER_DIR/wapm.sqlite
          rm $WASMER_DIR/globals/wapm.lock
          rm -rf wapm_packages
          rm wapm.toml
          rm wapm.lock
          chmod +x end-to-end-tests/install.sh
          echo "RUNNING SCRIPT..."
          ./end-to-end-tests/install.sh &> /tmp/install-out.txt
          echo "GENERATED OUTPUT:"
          cat /tmp/install-out.txt
          echo "COMPARING..."
          diff -Bba end-to-end-tests/install.txt /tmp/install-out.txt
          export OUT=$?
          if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
          rm wapm.lock
          rm wapm.toml
          rm -rf wapm_packages
          rm /tmp/install-out.txt
          if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
          exit $OUT
      - name: Regression test: verification and public key management
        shell: bash
        run: |
          export PATH=$PATH:$HOME/.cargo/bin
          export PATH=$PATH:$HOME/.wasmer/bin
          export WAPM_DISABLE_COLOR=true
          rm $WASMER_DIR/wapm.sqlite
          rm $WASMER_DIR/globals/wapm.lock
          rm -rf wapm_packages
          rm wapm.toml
          rm wapm.lock
          chmod +x end-to-end-tests/verification.sh
          echo "RUNNING SCRIPT..."
          ./end-to-end-tests/verification.sh &> /tmp/verification-out.txt
          echo "GENERATED OUTPUT:"
          cat /tmp/verification-out.txt
          echo "COMPARING..."
          diff -Bba end-to-end-tests/verification.txt /tmp/verification-out.txt
          export OUT=$?
          if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
          rm wapm.lock
          rm wapm.toml
          rm -rf wapm_packages
          rm /tmp/verification-out.txt
          if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
          exit $OUT
#      - name: Regression test: pkg_fs works globally and when installed locally
#        shell: bash
#        run: |
#          export PATH=$PATH:$HOME/.cargo/bin
#          export PATH=$PATH:$HOME/.wasmer/bin
#          export WAPM_DISABLE_COLOR=true
#          rm $HOME/.wasmer/wapm.sqlite
#          rm $HOME/.wasmer/globals/wapm.lock
#          rm -rf wapm_packages
#          rm wapm.toml
#          rm wapm.lock
#          chmod +x end-to-end-tests/package-fs-mapping.sh
#          echo "RUNNING SCRIPT..."
#          ./end-to-end-tests/package-fs-mapping.sh &> /tmp/package-fs-mapping-out.txt
#          echo "GENERATED OUTPUT:"
#          cat /tmp/package-fs-mapping-out.txt
#          echo "COMPARING..."
#          ## hack to get the current directory in the expected output
#          #sed -i.bak "s/{{CURRENT_DIR}}/$(pwd | sed 's/\//\\\//g')/g" end-to-end-tests/package-fs-mapping.txt
#          diff -Bba end-to-end-tests/package-fs-mapping.txt /tmp/package-fs-mapping-out.txt
#          export OUT=$?
#          if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
#          rm wapm.lock
#          rm wapm.toml
#          rm -rf wapm_packages
#          rm /tmp/package-fs-mapping-out.txt
#          rm $HOME/.wasmer/wapm.sqlite
#          if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
#          exit $OUT
      - name: Regression test: manifest validation rejects invalid manifests
        shell: bash
        run: |
          export PATH=$PATH:$HOME/.cargo/bin
          export PATH=$PATH:$HOME/.wasmer/bin
          export WAPM_DISABLE_COLOR=true
          rm $HOME/.wasmer/wapm.sqlite
          rm $HOME/.wasmer/globals/wapm.lock
          rm wapm.lock
          rm wapm.toml
          rm -rf wapm_packages
          chmod +x end-to-end-tests/manifest-validation.sh
          echo "RUNNING SCRIPT..."
          ./end-to-end-tests/manifest-validation.sh &> /tmp/manifest-validation-out.txt
          echo "GENERATED OUTPUT:"
          cat /tmp/manifest-validation-out.txt
          echo "COMPARING..."
          diff -Bba end-to-end-tests/manifest-validation.txt /tmp/manifest-validation-out.txt
          export OUT=$?
          if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
          rm wapm.lock
          rm wapm.toml
          rm -rf wapm_packages
          rm /tmp/manifest-validation-out.txt
          rm $HOME/.wasmer/wapm.sqlite
          if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
          exit $OUT
      - name: Regression test: package fs and command rename
        shell: bash
        run: |
          export PATH=$PATH:$HOME/.cargo/bin
          export PATH=$PATH:$HOME/.wasmer/bin
          export WAPM_DISABLE_COLOR=true
          rm $HOME/.wasmer/wapm.sqlite
          rm $HOME/.wasmer/globals/wapm.lock
          rm wapm.lock
          rm wapm.toml
          rm -rf wapm_packages
          chmod +x end-to-end-tests/validate-global.sh
          echo "RUNNING SCRIPT..."
          ./end-to-end-tests/validate-global.sh &> /tmp/validate-global-out.txt
          echo "GENERATED OUTPUT:"
          cat /tmp/validate-global-out.txt
          echo "COMPARING..."
          diff -Bba end-to-end-tests/validate-global.txt /tmp/validate-global-out.txt
          export OUT=$?
          if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
          rm wapm.lock
          rm wapm.toml
          rm -rf wapm_packages
          rm /tmp/validate-global-out.txt
          rm $HOME/.wasmer/wapm.sqlite
          if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
          exit $OUT
      - name: Regression test: Init a Manifest and Add some dependencies
        shell: bash
        run: |
          export PATH=$PATH:$HOME/.cargo/bin
          export PATH=$PATH:$HOME/.wasmer/bin
          export WAPM_DISABLE_COLOR=true
          rm $WASMER_DIR/wapm.sqlite
          rm $WASMER_DIR/globals/wapm.lock
          rm -rf wapm_packages
          rm wapm.toml
          rm wapm.lock
          chmod +x end-to-end-tests/init-and-add.sh
          echo "RUNNING SCRIPT..."
          ./end-to-end-tests/init-and-add.sh &> /tmp/init-and-add-out.txt
          echo "GENERATED OUTPUT:"
          cat /tmp/init-and-add-out.txt
          echo "ADJUSTING OUTPUT"
          # removes the absolute path
          tail -n +3 /tmp/init-and-add-out.txt > /tmp/init-and-add-out2.txt
          cat /tmp/init-and-add-out2.txt
          mv /tmp/init-and-add-out2.txt /tmp/init-and-add-out.txt
          echo "COMPARING..."
          diff -Bba end-to-end-tests/init-and-add.txt /tmp/init-and-add-out.txt
          export OUT=$?
          if ( [ -d globals ] || [ -f wapm.log ] ) then { echo "globals or wapm.log found; these files should not be in the working directory"; exit 1; } else { true; } fi
          rm wapm.lock
          rm wapm.toml
          rm -rf wapm_packages
          rm /tmp/init-and-add-out.txt
          if ( [ $OUT -ne 0 ] ) then { cat $HOME/.wasmer/wapm.log; } fi
          exit $OUT

  release:
    needs: [setup, test, regression_tests]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.DOING_RELEASE == '1'
    steps:
      - name: Download the Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.VERSION }}
          release_name: Release ${{ needs.setup.outputs.VERSION }}
          draft: true
          prerelease: false
      - name: Upload Release Asset Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/wapm-windows-latest/wapm.exe
          asset_name: wapm-windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Release Asset Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wapm-ubuntu-latest/wapm
          asset_name: wapm-linux-amd64
          asset_content_type: application/x-elf
      - name: Upload Release Asset Mac
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wapm-macos-latest/wapm
          asset_name: wapm-darwin-amd64
          asset_content_type: application/x-mach-binary
